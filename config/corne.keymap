/*
 * Copyright (c) 2023 Taneli Hongisto
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_fi.h"

// Layer definitions
#define L_DEF 0
#define L_SYM 1
#define L_FUN 2
#define L_NAV 3

// Abbreviations
#define xxx &none
#define V_UP C_VOLUME_UP
#define V_DOWN C_VOLUME_DOWN
#define MUTE C_MUTE
#define PLAY C_PLAY_PAUSE
#define NEXT C_NEXT
#define PREV C_PREVIOUS

// Configuration
/* Key indexes:
 *
 * 0  1  2  3  4  5    6  7  8  9  10 11
 * 12 13 14 15 16 17   18 19 20 21 22 23
 * 24 25 26 27 28 29   30 31 32 33 34 35
 *          36 37 38   39 40 41
 */
#define KEYS_LEFT 0  1  2  3  4  5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define KEYS_RIGHT 6  7  8  9  10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41
#define TAPPING_TERM 250
#define MO_SL(layer) &mo_sl layer layer

// Sticky layer timeout
&sl {
    release-after-ms = <5000>;
};

/ {
    // Un-dead accents
    ZMK_MACRO(caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings = <&kp F_CRET &kp SPACE>;
    )
    ZMK_MACRO(grave,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings = <&kp F_GRVE &kp SPACE>;
    )
    ZMK_MACRO(tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings = <&kp F_TLDE &kp SPACE>;
    )

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        alt_ctrl_g: alt_to_ctrl_gui_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TO_CTRL_TO_GUI_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LALT>, <&kp LCTRL>, <&kp LGUI>;
        };
        ctrl_alt_g: ctrl_to_alt_gui_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_TO_ALT_TO_GUI_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LCTRL>, <&kp LALT>, <&kp LGUI>;
        };
        shft_caps: shift_caps_lock_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_LOCK_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp RSHIFT>, <&kp CAPS>;
        };
        shft_nav: shift_nav_layer_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_NAV_LAYER_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp RSHIFT>, <&to L_NAV>;
        };
        mo_sl: symbol_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&mo>, <&sl>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    /* ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮ */
        &kp ESC     &kp Q       &kp W       &kp E       &kp R       &kp T           &kp Y       &kp U       &kp I       &kp O       &kp P       &bspc_del
        &kp TAB     &kp A       &kp S       &kp D       &kp F       &kp G           &kp H       &kp J       &kp K       &kp L       &kp O_UML   &kp A_UML
        &ctrl_alt_g &kp Z       &kp X       &kp C       &kp V       &kp B           &kp N       &kp M       &kp F_COM   &kp F_DOT   &kp F_DASH  &alt_ctrl_g
    /* ╰───────────┴───────────┴───────────╮                                                                           ╭───────────┴───────────┴───────────╯ */
                                           MO_SL(L_FUN) &shft_caps  &kp SPACE       &kp ENTER   &shft_nav   MO_SL(L_SYM)
                                        /* ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯ */
            >;
        };

        symbol_layer {
            bindings = <
    /* ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮ */
        &to L_DEF   &kp F_PLUS  &kp F_DASH  &kp F_STAR  &kp F_SLSH  &kp F_EQ        &kp F_EURO  &kp F_POUN  &kp F_CURR  xxx         xxx         &bspc_del
        &kp F_AMP   &kp F_EXCL  &kp F_QUES  &kp F_LBRC  &kp F_RBRC  &kp F_AT        &kp F_HASH  &kp F_LPAR  &kp F_RPAR  &grave      &kp F_DQT   &kp F_SQT
        &kp F_PIPE  &kp F_SLSH  &kp F_BSLH  &kp F_LT    &kp F_GT    &kp F_DLLR      &kp F_PRCNT &kp F_LBKT  &kp F_RBKT  &caret      &tilde      xxx
    /* ╰───────────┴───────────┴───────────╮                                                                           ╭───────────┴───────────┴───────────╯ */
                                            xxx         xxx         &kp SPACE       &kp ENTER   xxx         xxx
                                        /* ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯ */
            >;
        };

        function_layer {
            bindings = <
    /* ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮ */
        &to L_DEF   &kp N1      &kp N2      &kp N3      &kp N4      &kp N5          &kp F12     &kp F7      &kp F8      &kp F9      xxx         &bspc_del
        xxx         &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHIFT  xxx             &kp F11     &kp F4      &kp F5      &kp F6      xxx         &kp F_SQT
        xxx         &kp N6      &kp N7      &kp N8      &kp N9      &kp N0          &kp F10     &kp F1      &kp F2      &kp F3      xxx         xxx
    /* ╰───────────┴───────────┴───────────╮                                                                           ╭───────────┴───────────┴───────────╯ */
                                            xxx         xxx         &kp SPACE       &kp ENTER    xxx         xxx
                                        /* ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯ */
            >;
        };

        navigation_layer {
            bindings = <
    /* ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮ */
        &to L_DEF   xxx         xxx         xxx         xxx         xxx             xxx         xxx         xxx         xxx         xxx         &bspc_del
        xxx         &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   xxx             &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   xxx         &kp PLAY
        xxx         xxx         xxx         xxx         xxx         xxx             &kp PREV    &kp V_DOWN  &kp V_UP    &kp NEXT    xxx         &kp MUTE
    /* ╰───────────┴───────────┴───────────╮                                                                           ╭───────────┴───────────┴───────────╯ */
                                            xxx         xxx         &kp SPACE       &kp ENTER    xxx         xxx
                                        /* ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯ */
            >;
        };
    };
};
